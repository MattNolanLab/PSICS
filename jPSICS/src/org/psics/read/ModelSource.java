package org.psics.read;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;

import org.psics.be.FileSourced;

public abstract class ModelSource {

	public abstract Object read(boolean bresolve);

	public abstract Object simpleRead();

	public abstract void addLibrary(ProxMap pm, String sid);

	public abstract boolean canGet(String id);

	public abstract Object get(String id);

	public File ccdir;


	// TODO should probably get these from classpath xml;

	public ArrayList<String> getSearchPackageNames() {
		ArrayList<String> ret = new ArrayList<String>();
			ret.add("org.psics.model.control");
			ret.add("org.psics.model.channel");
			ret.add("org.psics.model.morph");
			ret.add("org.psics.model.electrical");
			ret.add("org.psics.model.environment");
			ret.add("org.psics.model.stimrec");
			ret.add("org.psics.model.display");
			ret.add("org.psics.model.math");
			ret.add("org.psics.model.synapse");
			ret.add("org.psics.model.activity");
			ret.add("org.psics.model");

		return ret;
	}


	public ArrayList<String> getNeuronSearchPackageNames() {
		ArrayList<String> ret = new ArrayList<String>();
		ret.add("org.psics.model.neuroml");
		ret.add("org.psics.model.neuroml.lc");
		ret.add("org.psics.model.imports.neuron");
		ret.add("org.psics.model.imports.neuron.lc");
		return ret;
	}


	public abstract void setItemIDMap(HashMap<String, Object> hm);


	public abstract String listItems();


	public String listItems(HashMap<String, LibraryItem> libItems) {
		StringBuffer sb = new StringBuffer();
		if (libItems.size() > 0) {
		sb.append("possible items: ");
		StringBuffer sbl = new StringBuffer();
		for (String s : libItems.keySet()) {
			sbl.append(s);
			sbl.append(", ");
			if (sbl.length() > 60) {
				sb.append(sbl.toString());
				sb.append("\n");
				sbl = new StringBuffer();
			}
		}

	} else {
		sb.append("no library items ");
	}
		return sb.toString();
	}


	public static boolean isNeuron(String sin) {
		String s = sin;
		if (s.length() > 1000) {
			s = s.substring(0, 1000);
		}

		boolean ret = false;
		if (s.indexOf("<morphml ") >= 0) {
			ret = true;
		} else if (s.indexOf("generated by NEURON ") >= 0) {
			ret = true;
		}
		return ret;
	}

	public void setCCDir(File dir) {
		ccdir = dir;
	}

	public abstract void populateFileSourced(FileSourced sourced);




}
